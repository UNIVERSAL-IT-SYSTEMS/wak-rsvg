var DIRECTORY_PATH = File(module.filename).parent.path;var os = application.os;var isMac = os.isMac;var isWindows = os.isWindows;var isLinux = os.isLinux;var EXECUTABLE_PATH = (function(){	if(isMac){		return DIRECTORY_PATH + 'MacOS/wasvgtopdf';	}	if(isLinux){		return DIRECTORY_PATH + 'Linux64/wasvgtopdf';	}	if(isWindows){		return DIRECTORY_PATH + 'Windows64/wasvgtopdf.exe';	}})();//exports.executablePath = EXECUTABLE_PATH;var execute = function(path, command, stdIn){	var result = {		'console':{			'stdIn':'',			'stdOut':null,				'stdErr':''},		'worker':{			'hasStarted':false,			'exitStatus':null,			'forced':null}	};		if((/^\S/).test(command)){		path += ' ';	}	result.console.stdIn = path + command;	var worker = new SystemWorker(result.console.stdIn);	worker.setBinary(true);			worker.onmessage = function(e){		if(!result.console.stdOut){			result.console.stdOut = new Buffer(e.data.length);			e.data.copy(result.console.stdOut);		}else{			var temp = new Buffer(result.console.stdOut.length + e.data.length);			result.console.stdOut.copy(temp);			e.data.copy(temp, result.console.stdOut.length);			result.console.stdOut = temp.slice(0);		}	}	worker.onerror = function(e){		try{			result.console.stdErr += e.data.toString('utf8');		}catch(e){		for(var i = 0;i < e.messages.length;++i){			console.error('%s', e.messages[i]);					}		}	}	worker.onterminated = function(e){		result.worker.hasStarted = e.hasStarted;		result.worker.exitStatus = e.exitStatus;		result.worker.forced = e.forced;					exitWait();	}	if(typeof stdIn === 'string' || stdIn instanceof Buffer){		worker.postMessage(stdIn);		worker.endOfInput();	}				worker.wait();		return result;}var escapePath = function(path){	if(typeof path === 'string'){		if(isMac || isLinux){			return path.replace(/([\\!"#$%&\'()=~|<>?;*`\[\] ])/g, '\\$1');		}			if(isWindows){			if((/[&|<>()%\^\\" ]/).test(path)){								if((/\\$/).test(path)){					path = '"' + path + '\\"';				}else{					path = '"' + path + '"';				}			}			return path;		}	}}function getOptions(options){	var switches = '';	if(options){		if(options.hasOwnProperty('dpi_x') && options.dpi_x){			switches += ' -x ' + Number(options.dpi_x);		}		if(options.hasOwnProperty('dpi_y') && options.dpi_y){			switches += ' -y ' + Number(options.dpi_y);		}		if(options.hasOwnProperty('zoom_x') && options.zoom_x){			switches += ' -X ' + Number(options.zoom_x);		}		if(options.hasOwnProperty('zoom_y') && options.zoom_y){			switches += ' -Y ' + Number(options.zoom_y);		}						if(options.hasOwnProperty('width') && options.width){			switches += ' -w ' + parseInt(options.width, 10);		}		if(options.hasOwnProperty('height') && options.height){			switches += ' -h ' + parseInt(options.height, 10);		}		if(options.hasOwnProperty('keep_aspect_ratio') && options.keep_aspect_ratio){			switches += ' -a ' + Number(options.keep_aspect_ratio);		}			if((options.hasOwnProperty('base_url')) 		&& (typeof options.base_url === 'string')		&& (options.base_url.length)){			switches += ' -u ' + options.base_url;		}		if((options.hasOwnProperty('input')) 		&& (typeof options.input === 'string')		&& (options.input.length)){			switches += ' -i ' + options.input;		}		if((options.hasOwnProperty('output')) 		&& (typeof options.output === 'string')		&& (options.output.length)){			switches += ' -o ' + options.output;		}															}	return switches;}exports.toPDF = function(data, options){	return execute(escapePath(EXECUTABLE_PATH), '-P' + getOptions(options), data);}exports.toPNG = function(data, options){	return execute(escapePath(EXECUTABLE_PATH), '-p' + getOptions(options), data);}